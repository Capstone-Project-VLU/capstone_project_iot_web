import Swal from "sweetalert2";
import {
  addMemberByIdDevice,
  removeMemberByIdDevice,
  renameDeviceByIdDevice,
} from "../../api/deviceApi"; // Import the API function to update device members

// SweetAlert2 popup function to add a device
export const addDevicePopup = (member, fetchUserDevices) => {
  // üëà Accept function as a parameter
  const retryFunction = async () => {
    Swal.fire({
      title: "Vui l√≤ng nh·∫≠p m√£ thi·∫øt b·ªã",
      input: "text",
      inputPlaceholder: "ID: 43528132",
      showCancelButton: true,
      confirmButtonText: "K·∫øt n·ªëi",
      cancelButtonText: "H·ªßy",
      inputValidator: (value) => {
        if (!value) return "H√£y nh·∫≠p m√£ thi·∫øt b·ªã!";
      },
    }).then(async (result) => {
      if (result.isConfirmed) {
        const deviceId = result.value;
        // console.log(deviceId);
        // console.log(member.userId);
        try {
          await addMemberByIdDevice(deviceId, {
            userId: member.userId,
            role: "member",
          });
          fetchUserDevices(); // ‚úÖ Fix: Use the function from props
          Swal.fire("Th√†nh c√¥ng!", "K·∫øt n·ªëi th√†nh c√¥ng!", "success");
        } catch (error) {
          // console.error("Error checking device:", error);
          Swal.fire({
            title: "Th·∫•t b·∫°i",
            text: "Thi·∫øt b·ªã kh√¥ng t·ªìn t·∫°i",
            icon: "error",
            confirmButtonText: "Th·ª≠ l·∫°i",
          }).then((result) => {
            if (result.isConfirmed) retryFunction();
          });
        }
      }
    });
  };
  retryFunction();
};

export const apiResponseHandler = (message,type) => {
  Swal.fire({
    icon: type || "success",
    text: message || "Something went wrong!",
  });
};

export const removeDevicePopup = (deviceId, userId) => {
  return new Promise((resolve, reject) => {
    Swal.fire({
      title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r·ªùi kh·ªèi khu v∆∞·ªùn n√†y kh√¥ng?",
      text: "Khu v∆∞·ªùn n√†y s·∫Ω kh√¥ng xu·∫•t hi·ªán trong t√†i kho·∫£n b·∫°n.",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "X√≥a",
      cancelButtonText: "H·ªßy",
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          await removeMemberByIdDevice(deviceId, userId);
          await Swal.fire(
            "R·ªùi th√†nh c√¥ng!",
            "B·∫°n ƒë√£ r·ªùi kh·ªèi khu v∆∞·ªùn.",
            "success"
          );
          resolve(); // <-- notify success
        } catch (error) {
          apiResponseHandler("Failed to remove device. Please try again.");
          reject(error); // <-- notify failure
        }
      } else {
        reject("Cancelled");
      }
    });
  });
};

export const renameDevicePopup = (deviceId,name_area) => {
  return new Promise((resolve, reject) => {
    Swal.fire({
      title: "Vui l√≤ng nh·∫≠p t√™n m·ªõi cho khu v∆∞·ªùn",
      input: "text",
      inputPlaceholder: "V∆∞·ªùn rau xanh",
      inputValue: name_area, // Set the initial value to the current name
      showCancelButton: true,
      confirmButtonText: "ƒê·ªïi t√™n",
      cancelButtonText: "H·ªßy",
      inputValidator: (value) => {
        if (!value) return "H√£y t√™n m·ªõi!";
      },
    }).then(async (result) => {
      if (result.isConfirmed) {
        const newName = result.value;
        // console.log(newName);
        // console.log(deviceId);
        try {
          await renameDeviceByIdDevice(deviceId, { name_area: newName });
          Swal.fire("Th√†nh c√¥ng!", "Thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c ƒë·ªïi t√™n.", "success");
          resolve(); // ‚úÖ Let caller know it's done
        } catch (error) {
          apiResponseHandler("ƒê·ªïi t√™n thi·∫øt b·ªã th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
          reject(error);
        }
      } else {
        reject("cancelled");
      }
    });
  });
};

export const areUSurePopup = (message) => {
  return new Promise((resolve, reject) => {
    Swal.fire({
      title: message || "B·∫°n c√≥ ch·∫Øc ch·∫Øn kh√¥ng?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "C√≥",
      cancelButtonText: "Kh√¥ng",
    }).then((result) => {
      if (result.isConfirmed) {
        resolve();
      } else {
        reject("cancelled");
      }
    });
  });
}
